buildscript {
    ext {
        springBootVersion = '1.2.2.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
}

project.ext {
    springBootVersion = '1.2.3.RELEASE'
    springCloudVersion = '1.0.0.RELEASE'
    restAssuredVersion = '2.4.0'
    consulApiVersion = '1.1.0'
    springConsulVersion = '1.0.16.BUILD-SNAPSHOT'

    // Defaults
    packageDir = new File('pkg')
}

jar {
    baseName = 'atlas'
    version = '0.0.2'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'http://repo.spring.io/snapshot' }
//    maven { url 'http://nexus.ecwid.com/content/groups/public' }
}

dependencies {
    compile("com.google.guava:guava:18.0")
    compile("org.yaml:snakeyaml:1.15")
    compile("commons-io:commons-io:2.4")
    compile("com.googlecode.json-simple:json-simple:1.1.1")

    // Spring Boot
    compile("org.springframework.boot:spring-boot-starter-web:$springBootVersion")
    compile("org.springframework.boot:spring-boot-starter-jetty:$springBootVersion")
    compile("org.springframework.boot:spring-boot-starter-actuator:$springBootVersion")
    compile("org.springframework.boot:spring-boot-starter-remote-shell:$springBootVersion")

    // Spring Cloud
    compile("org.springframework.cloud:spring-cloud-commons:$springCloudVersion")
    compile("org.springframework.cloud:spring-cloud-config-client:$springCloudVersion")
    compile("org.springframework.cloud:spring-cloud-starter-hystrix:$springCloudVersion")

    // Spring & Consul
    compile("org.springframework.cloud:spring-cloud-consul-core:$springConsulVersion")
    compile("org.springframework.cloud:spring-cloud-consul-config:$springConsulVersion")
    compile("org.springframework.cloud:spring-cloud-consul-discovery:$springConsulVersion")

    // Consul
//    compile "com.ecwid.consul:consul-api:$consulApiVersion"

    // OrientDB
    compile 'com.orientechnologies:orientdb-core:2.0.5'
    compile 'com.orientechnologies:orientdb-graphdb:2.0.5'
    compile 'com.orientechnologies:orientdb-client:2.0.5'
    compile 'org.codehaus.jackson:jackson-core-asl:1.9.13'

//    provided "org.projectlombok:lombok:1.16.4"
//    compile "org.projectlombok:lombok:1.16.4"

//    compile group: 'org.projectlombok', name: 'lombok', version:'1.16.4'
//    compile group: 'org.slf4j', name: 'slf4j-api', version:'1.7.7'

    compile "com.google.code.gson:gson:2.3"

//    testCompile("junit:junit")
    testCompile("org.springframework.boot:spring-boot-starter-test:$springBootVersion")
    testCompile("com.jayway.restassured:rest-assured:$restAssuredVersion")
}

task dropPackage(type: Delete) {
    delete packageDir
}

task preparePackage {
    dependsOn dropPackage
    doLast {
        packageDir.mkdirs()
    }
}

task copyPackageFiles(type: Copy) {
    from(libsDir)
    include("*${jar.version}*.jar")
    into(packageDir)
}

task copyDocker(type: Copy) {
    from 'docker'
    into packageDir
    include 'Dockerfile.template'
    rename { file -> 'Dockerfile' }
    expand(name: applicationName, version: jar.version, generated: new Date())
}

task "package" {
    dependsOn preparePackage, copyPackageFiles, copyDocker
}

copyPackageFiles.mustRunAfter preparePackage
copyDocker.mustRunAfter preparePackage

task dockerBuild { //(type:Exec) {
    //commandLine 'cmd', '/c', "docker build -t accordance/${applicationName}:${jar.version} ${packageDir}"
    doLast {
        def process = "docker build -t accordance/${applicationName}:${jar.version} ${packageDir}".execute()
        println process.text
        if(!process.exitValue()) {
            println "FAILED !"
        }
    }
}

bootRun {
    if ( project.hasProperty('args') ) {
        args project.args.split('\\s+')
    }
}

eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

// gradle build -x test
